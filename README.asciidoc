= Generic Types
Sebastian Ho√ü <https://github.com/sebhoss[@sebhoss]>
:github-org: sebhoss
:project-name: generic-types
:project-group: com.github.sebhoss.utils
:coverity-project: 7620

image:https://img.shields.io/maven-central/v/{project-group}/{project-name}.svg?style=flat-square["Maven Central", link="https://maven-badges.herokuapp.com/maven-central/{project-group}/{project-name}"]
image:https://www.openhub.net/p/{project-name}/widgets/project_thin_badge.gif["Open Hub statistics", link="https://www.ohloh.net/p/{project-name}"]
image:https://img.shields.io/travis/{github-org}/{project-name}/master.svg?style=flat-square["Build Status", link="https://travis-ci.org/{github-org}/{project-name}"]
image:https://img.shields.io/coveralls/{github-org}/{project-name}/master.svg?style=flat-square["", link="https://coveralls.io/github/{github-org}/{project-name}"]
image:https://scan.coverity.com/projects/{coverity-project}/badge.svg["Coverity Scan Result", link="https://scan.coverity.com/projects/{coverity-project}"]
image:https://badges.gitter.im/Join%20Chat.svg["Gitter", link="https://gitter.im/{github-org}/{project-name}"]

This Java library provides a factory to create generic `java.lang.reflect.Type` variations, such as `Map<String, Point>`. Use it as follows:

[source,java]
----
final Type genericMap = GenericTypes.generic(Map.class, String.class, Point.class);
final Type genericList = GenericTypes.generic(List.class, String.class);
----

Super- and subtypes such as `List<? super Point>` or `List<? extends Number>` can be created in the following way:

[source,java]
----
final Type list = GenericTypes.generic(List.class, GenericTypes.supertype(Point.class));
final Type list = GenericTypes.generic(List.class, GenericTypes.subtype(Number.class));
----

Use static imports to shorten the above calls to:

[source,java]
----
final Type list = generic(List.class, supertype(Point.class));
final Type list = generic(List.class, subtype(Number.class));
----

and then go crazy with this:

[source,java]
----
final Type type = generic(List.class, generic(Map.class, subtype(Number.class), supertype(Point.class)));
----

which represents a `List<Map<? extends Number, ? super Point>>`.
