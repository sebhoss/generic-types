= Generic Types
Sebastian Hoß <https://github.com/sebhoss[@sebhoss]>
:github-org: sebhoss
:project-name: generic-types
:project-group: com.github.sebhoss.utils
:coverity-project: 7620
:toc:
:toc-placement: preamble


image:https://img.shields.io/maven-central/v/{project-group}/{project-name}.svg?style=flat-square["Maven Central", link="https://maven-badges.herokuapp.com/maven-central/{project-group}/{project-name}"]
image:https://www.openhub.net/p/{project-name}/widgets/project_thin_badge.gif["Open Hub statistics", link="https://www.ohloh.net/p/{project-name}"]
image:https://img.shields.io/travis/{github-org}/{project-name}/master.svg?style=flat-square["Build Status", link="https://travis-ci.org/{github-org}/{project-name}"]
image:https://img.shields.io/coveralls/{github-org}/{project-name}/master.svg?style=flat-square["", link="https://coveralls.io/github/{github-org}/{project-name}"]
image:https://scan.coverity.com/projects/{coverity-project}/badge.svg["Coverity Scan Result", link="https://scan.coverity.com/projects/{coverity-project}"]
image:https://badges.gitter.im/Join%20Chat.svg["Gitter", link="https://gitter.im/{github-org}/{project-name}"]


This https://www.java.com[Java] library provides a factory to create generic `java.lang.reflect.Type` variations, such as `Map<String, Point>`.

=== Features

* Factory methods to create generic types, including wildcards.

=== Development Status

All currently required feature are implemented. This project is in maintenance mode.


== Usage

[source,java]
----
// Map<String, Point>
final Type genericMap = GenericTypes.generic(Map.class, String.class, Point.class);

// List<String>
final Type genericList = GenericTypes.generic(List.class, String.class);
----

Super- and subtypes such as `List<? super Point>` or `List<? extends Number>` can be created in the following way:

[source,java]
----
// List<? super Point>
final Type list = GenericTypes.generic(List.class, GenericTypes.supertype(Point.class));

// List<? extends Number>
final Type list = GenericTypes.generic(List.class, GenericTypes.subtype(Number.class));
----

Use static imports to shorten the above calls to:

[source,java]
----
// List<? super Point>
final Type list = generic(List.class, supertype(Point.class));

// List<? extends Number>
final Type list = generic(List.class, subtype(Number.class));
----

and then go crazy with this:

[source,java]
----
// List<Map<? extends Number, ? super Point>>
final Type type = generic(List.class, generic(Map.class, subtype(Number.class), supertype(Point.class)));
----

=== Integration

To use this project just declare the following dependency inside your POM:

[source,xml,subs="attributes,verbatim"]
----
<dependencies>
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>{project-name}</artifactId>
    <version>${version.generic-types}</version>
  </dependency>
</dependencies>
----

Replace `${version.generic-types}` with the link:http://search.maven.org/#search%7Cga%7C1%7Cg%3A{project-group}%20a%3A{project-name}[latest release]. This project follows the link:http://semver.org/[semantic versioning guidelines].


=== Compatibility

This project is compatible with the following Java versions:

.Java compatibility
|===
| | 1.X.Y

| Java 8
| ✓
|===

== License

This project is licensed under the link:http://unlicense.org/[UNLICENSE]. See the link:UNLICENSE[UNLICENSE file] for more information.
